/*
####################################################################################################################################################
#Copyright (c) 2013, Josiah Walker
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or #other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED #WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY #DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS #OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING #NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####################################################################################################################################################
*/

//GPU implementation of NMDS update rule (using scaled isotonic differences)
//requires the following defines: 
//CHUNK_SIZE
//TOTAL_THREADS
//STEP_SIZE (ie ceil(CHUNK_SIZE/TOTAL_THREADS))
//DATA_STEP_SIZE (ie ceil(DATA_SIZE/TOTAL_THREADS))
//DATA_DIMS
//DATA_SIZE
//memory complexity = 3*4*CHUNK_SIZE + 6*4*TOTAL_THREADS + 2*DATA_DIMS*DATA_SIZE + 8

__global__ void NMDS(const unsigned int* Rank, const float* distChunk, const float* Coords, float* Deltas) { //, const long global_offset) {
    const unsigned int v = threadIdx.x;
    
    const unsigned int offset = v*DATA_STEP_SIZE;
    const unsigned int limit2 = min(DATA_STEP_SIZE+offset,DATA_SIZE);
    
    //1: copy data
    for (unsigned int i = offset*DATA_DIMS; i < (limit2+1)*DATA_DIMS; ++i) {
        Deltas[i] = Coords[i];
    }
    //2: apply updates
    for (unsigned int i = 0; i < CHUNK_SIZE; ++i) {
        const unsigned int pos = 2*i;
        if (Rank[pos] >= offset and Rank[pos] < limit2) {
            const unsigned int pos2 = Rank[pos]*DATA_DIMS;
            for (unsigned int j = 0; j < DATA_DIMS; ++j) {
                Deltas[pos2+j] -=distChunk[i]*(Coords[pos2+j]-Coords[Rank[pos+1]*DATA_DIMS+j]); //distChunk[i]*(Coords[pos2+j]-Coords[Rank[pos+1]*DATA_DIMS+j]);
            }
        } else if (Rank[pos+1] >= offset and Rank[pos+1] < limit2) {
            const unsigned int pos2 = Rank[pos+1]*DATA_DIMS;
            for (unsigned int j = 0; j < DATA_DIMS; ++j) {
                Deltas[pos2+j] += distChunk[i]*(Coords[Rank[pos]*DATA_DIMS+j]-Coords[pos2+j]);
            }
        }
    }
}
    

